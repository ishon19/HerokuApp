{"version":3,"sources":["components/Note.js","services/note.js","components/Notification.js","components/App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObj","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","notesToShow","filter","map","element","key","find","changedNote","returnedNote","catch","error","setTimeout","n","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","res","ReactDOM","render","document","getElementById"],"mappings":"kOAWeA,EATF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QADR,IACiB,4BAAQC,QAASL,GAAmBC,K,gBCJnDK,EAAU,kCAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCT9BK,EALM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EAAyB,KACtB,yBAAKd,UAAU,SAASc,ICC3BC,EAAS,WAMb,OACE,yBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIR,6BACA,oFAwFSC,EAnFH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,gBAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,MAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAWrBC,qBALa,WACXC,QAAQC,IAAI,UACZC,IAAqB5B,MAAK,SAAC6B,GAAD,OAAkBX,EAASW,QAGvC,IAEhB,IAuCMC,EAAcT,EAChBJ,EACAA,EAAMc,QAAO,SAACzC,GAAD,OAA6B,IAAnBA,EAAKG,aAEhC,OACE,yBAAKC,UAAU,UACb,qCACA,kBAAC,EAAD,CAAcc,QAASe,IACvB,6BACE,4BAAQ3B,QAAS,kBAAM0B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGS,EAAYE,KAAI,SAACC,GAAD,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAQ5B,GACbf,KAAM2C,EACN1C,iBAAkB,kBA1CD,SAACc,GAC1B,IAAMf,EAAO2B,EAAMkB,MAAK,SAAC7C,GAAD,OAAUA,EAAKe,KAAOA,KACxC+B,EAAW,2BAAQ9C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDmC,EACUvB,EAAI+B,GACXpC,MAAK,SAACqC,GAAD,OACJnB,EAASD,EAAMe,KAAI,SAAC1C,GAAD,OAAWA,EAAKe,KAAOA,EAAKgC,EAAe/C,SAE/DgD,OAAM,SAACC,GACNf,EAAgB,aAAD,OACAlC,EAAKK,QADL,+CAGf6C,YAAW,WACThB,EAAgB,QACf,KACHN,EAASD,EAAMc,QAAO,SAACU,GAAD,OAAOA,EAAEpC,KAAOA,SA0BVqC,CAAmBT,EAAQ5B,WAIzD,0BAAMsC,SA7DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAASwB,EACT4B,MAAM,IAAIC,MAAOC,cACjBxD,UAAWyD,KAAKC,SAAW,IAI7BvB,EAAmBkB,GAAY9C,MAAK,SAACqC,GACnCnB,EAASD,EAAMmC,OAAOf,IACtBjB,EAAW,SAmDT,2BAAOiC,MAAOlC,EAASmC,SA3BJ,SAACV,GACxBxB,EAAWwB,EAAMW,OAAOF,UA2BpB,4BAAQG,KAAK,UAAb,cAEF,kBAAC,EAAD,Q,MCtEN1D,IAAMC,IAAI,mCAAmCC,MAAK,SAACyD,GACjD,IAAMxC,EAAQwC,EAAIvD,KAClBwD,IAASC,OAAO,kBAAC,EAAD,CAAK1C,MAAOA,IAAW2C,SAASC,eAAe,c","file":"static/js/main.b8df567e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"Make not important\" : \"Make Important\";\n  return (\n    <li className=\"note\">\n      {note.content} <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\n\nconst baseUrl = \"http://localhost:3001/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObj) => {\n  const request = axios.post(baseUrl, newObj);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObj) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObj);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  if (message === null) return null;\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./Note\";\nimport noteService from \"../services/note\";\nimport Notification from \"./Notification\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note App.. Courtesy of University of Helsinki 2020</em>\n    </div>\n  );\n};\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note..\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const hook = () => {\n    console.log(\"effect\");\n    noteService.getAll().then((initialNotes) => setNotes(initialNotes));\n  };\n\n  useEffect(hook, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      //id: notes.length + 1,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((note) => note.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) =>\n        setNotes(notes.map((note) => (note.id === id ? returnedNote : note)))\n      )\n      .catch((error) => {\n        setErrorMessage(\n          `the note '${note.content}' has already been deleted from the server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  return (\n    <div className=\"header\">\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          Show {showAll ? \"Important\" : \"All\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((element) => (\n          <Note\n            key={element.id}\n            note={element}\n            toggleImportance={() => toggleImportanceOf(element.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save Note</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport axios from \"axios\";\nimport \"./index.css\";\n\n/* const notes = [\n  {\n    id: 1,\n    content: \"HTML is easy\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  },\n  {\n    id: 2,\n    content: \"Browser can execute only Javascript\",\n    date: \"2019-05-30T18:39:34.091Z\",\n    important: false,\n  },\n  {\n    id: 3,\n    content: \"GET and POST are the most important methods of HTTP protocol\",\n    date: \"2019-05-30T19:20:14.298Z\",\n    important: true,\n  },\n]; */\n\naxios.get(\"http://localhost:3001/api/notes\").then((res) => {\n  const notes = res.data;\n  ReactDOM.render(<App notes={notes} />, document.getElementById(\"root\"));\n});\n\n//ReactDOM.render(<App notes={notes} />, document.getElementById(\"root\"));\n"],"sourceRoot":""}